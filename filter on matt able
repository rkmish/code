  applyCommonFilter(filterValue: string) {
        this.CommonFilterText = filterValue;
        filterValue = filterValue.trim();
        filterValue = filterValue.toLowerCase();
        this.gridDataSource.filter = filterValue;
        //this.ScenarioListDS.filter = filterValue;
        if (filterValue != undefined && filterValue != "" && filterValue != null) {
            this.gridDataSource.filterPredicate = (data: TmpSoftwareProjectMapDetails, filter: string): boolean => { return true };
            this.gridDataSource.filterPredicate = this.createFilter();
        }
        //this.gridDataSource.filteredData.length === 0 ? this.noDataFound = true : this.noDataFound = false;
        if (this.gridDataSource.filteredData.length === 0) {
            this.noDataFound = true;
            this.showGridCol = false;
        }
        else {
            this.noDataFound = false;
            this.showGridCol = false;;
        }
    }

    createFilter() {

        var result;
        var func = (data: TmpSoftwareProjectMapDetails, filter: string): boolean => {
            if (data.SoftwareSettingOptions != null) {
                if (data.ContingentFeature != null) {
                    if (data.ProductionTitle != null) {
                        if (data.ProjectId != null) {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProductionTitle.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.ProjectId.toString().indexOf(this.CommonFilterText) != -1 || data.ContingentFeature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1
                                || data.SoftwareSettingOptions.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        } else {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProductionTitle.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.ContingentFeature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.SoftwareSettingOptions.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        }
                    }
                    else {
                        if (data.ProjectId != null) {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProjectId.toString().indexOf(this.CommonFilterText) != -1 || data.ContingentFeature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.SoftwareSettingOptions.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        } else {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.ContingentFeature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.SoftwareSettingOptions.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        }
                    }
                }

                else {
                    if (data.ProductionTitle != null) {
                        if (data.ProjectId != null) {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProductionTitle.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.ProjectId.toString().indexOf(this.CommonFilterText) != -1 || data.SoftwareSettingOptions.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        } else {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProductionTitle.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.SoftwareSettingOptions.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        }
                    }
                    else {
                        if (data.ProjectId != null) {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProjectId.toString().indexOf(this.CommonFilterText) != -1 || data.SoftwareSettingOptions.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        } else {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.SoftwareSettingOptions.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        }
                    }
                }
            }
            else {
                if (data.ContingentFeature != null) {
                    if (data.ProductionTitle != null) {
                        if (data.ProjectId != null) {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProductionTitle.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.ProjectId.toString().indexOf(this.CommonFilterText) != -1 || data.ContingentFeature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1
                            )
                        } else {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProductionTitle.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.ContingentFeature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        }
                    }
                    else {
                        if (data.ProjectId != null) {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProjectId.toString().indexOf(this.CommonFilterText) != -1 || data.ContingentFeature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        } else {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.ContingentFeature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        }
                    }
                }

                else {
                    if (data.ProductionTitle != null) {
                        if (data.ProjectId != null) {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProductionTitle.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 || data.ProjectId.toString().indexOf(this.CommonFilterText) != -1)
                        } else {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProductionTitle.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        }
                    }
                    else {
                        if (data.ProjectId != null) {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1 ||
                                data.ProjectId.toString().indexOf(this.CommonFilterText) != -1)
                        } else {
                            result = (data.Feature.toLowerCase().indexOf(this.CommonFilterText.toLowerCase()) != -1)
                        }
                    }
                }
            }
            return result
        }
        return func;
    }


 applyCommonFilter(filterValue: string) {
    filterValue = filterValue.trim();
    //filterValue = filterValue.toLowerCase();
    //filterValue = filterValue.toUpperCase();
    this.CommonFilterText = filterValue;
    var abc;


    //this.gridDataSourceCopy.filter = filterValue;
    // if (this.wiringCheck.ModuleTo != "") {
    //   abc = this.dataList.filter(x => (x.FROM_EQUIP_NO.includes(this.CommonFilterText.toUpperCase()) || x.TO_FINAL_EQUIP_NO.includes(this.CommonFilterText.toUpperCase())
    //     || x.TO_FINAL_TERM_POSITION.includes(this.CommonFilterText.toUpperCase()) || x.BUNDLE_NO.includes(this.CommonFilterText.toUpperCase())
    //     || x.FROM_TERM_POSITION.includes(this.CommonFilterText.toUpperCase()) || x.WIRE_DIAGRAM.includes(this.CommonFilterText.toUpperCase())));
    // }
    // else {
    //   abc = this.dataList.filter(x => (x.FROM_EQUIP_NO.includes(this.CommonFilterText.toUpperCase()) || x.TO_EQUIP_NO.includes(this.CommonFilterText.toUpperCase())
    //     || x.TO_FINAL_TERM_POSITION.includes(this.CommonFilterText.toUpperCase()) || x.BUNDLE_NO.includes(this.CommonFilterText.toUpperCase())
    //     || x.FROM_TERM_POSITION.includes(this.CommonFilterText.toUpperCase()) || x.WIRE_DIAGRAM.includes(this.CommonFilterText.toUpperCase())));
    // }


    const columns = (Object.keys(this.dataList[0]));
 
    if (filterValue != undefined && filterValue != "" && filterValue != null) {
     
      //this.gridDataSource.filterPredicate = (data: { id: string }, filter: string): boolean => { return true };
      this.gridDataSource.filterPredicate = this.createFilter();
    }
    this.gridDataSource = new MatTableDataSource(this.dataList);
    this.gridDataSource.filter = filterValue;
    this.gridDataSource.filteredData.length === 0 ? this.noDataFound = true : this.noDataFound = false;
    this.VisibleSearch = true;
  }


  createFilter(): (data: any, filter: any) => boolean {
    const filterFunction = function(data, filter): boolean {
      console.log(filter);
      const searchData = JSON.parse(filter);
      let status = false;
      for (const key in searchData) {
        if (data[key].indexOf(searchData[key]) !== -1) {
          status = true;
        } else {
          status = false;
          break;
        }
      }
      return status;
    };
    return filterFunction;
  }
